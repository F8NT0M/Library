from book import Book
from library import Library
from reader import Reader

#Импортирует классы Library, Book и Reader из соответствующих модулей. Эти классы, вероятно, представляют собой структуру библиотеки, книги и читателей
if __name__ == "__main__":
    library = Library()
#Проверяет, является ли данный файл основным исполняемым модулем. Если да, создается экземпляр класса Library, представляющий библиотеку

    def display_menu(): #Определяет функцию `display_menu`, которая будет выводить меню системы управления библиотекой
        """Вывoдит меню системы управления библиотекой."""
        print("\nСистема управления библиотекой") #Выводит заголовок меню на экран. `\n` используется для переноса строки перед выводом текста
        print("1. Добавить книгу")
        print("2. Удалить книгу")
        print("3. Добавить читателя")
        print("4. Удалить читателя")
        print("5. Выдать книгу")
        print("6. Загрузить данные из файла")
        print("7. Сохранить данные в файл")
        print("8. Показать отчёт о выданных книгах")
        print("9. Выйти")
        #Каждая из этих строк выводит доступные действия в меню. Пользователь может выбрать одно из действий, введя соответствующий номер

    while True: #Запускает бесконечный цикл, который будет продолжаться до тех пор, пока не будет выполнено условие выхода (например, когда пользователь выберет выход)
        display_menu() #Вызывает функцию `display_menu`, чтобы отобразить меню действий для пользователя
        choice = input("Введите номер действия: ") #Запрашивает у пользователя ввод номера действия и сохраняет его в переменной `choice`

        if choice == "1": #Проверяет, выбрал ли пользователь действие "1" (Добавить книгу)
            title = input("Введите название книги: ") #Запрашивает у пользователя название книги для добавления
            author = input("Введите автора книги: ")
            year = int(input("Введите год издания книги: "))
            genre = input("Введите жанр книги: ")
            copies = int(input("Введите количество экземпляров книги: "))
            library.add_book(Book(title, author, year, genre, copies)) #Создает новый объект `Book` с введенными данными и добавляет его в библиотеку с помощью метода `add_book`
            print(f"Книга '{title}' успешно добавлена.") #Выводит сообщение о том, что книга была успешно добавлена в библиотеку

        elif choice == "2":
            title = input("Введите название книги для удаления: ")
            library.remove_book(title) #Вызывает метод `remove_book` у объекта `library`, чтобы удалить указанную книгу
            print(f"Книга '{title}' успешно удалена.")

        elif choice == "3":
            first_name = input("Введите имя читателя: ")
            last_name = input("Введите фамилию читателя: ")
            card_number = input("Введите номер читательского билета: ")
            library.add_reader(Reader(first_name, last_name, card_number)) #Создает новый объект `Reader` с введенными данными и добавляет его в библиотеку с помощью метода `add_reader`
            print(f"Читатель '{first_name} {last_name}' успешно добавлен.")

        elif choice == "4":
            card_number = input("Введите номер читательского билета для удаления: ")
            library.remove_reader(card_number) #Вызывает метод `remove_reader` у объекта `library`, чтобы удалить указанного читателя
            print(f"Читатель с номером '{card_number}' успешно удалён.")

        elif choice == "5":
            card_number = input("Введите номер читательского билета: ")
            book_title = input("Введите название книги: ")
            library.issue_book(card_number, book_title) #Вызывает метод `remove_reader` у объекта `library`, чтобы удалить указанного читателя

        elif choice == "6":
            filename = input("Введите имя файла сохранённых данных: ")
            library.load_from_file(filename) #Вызывает метод `load_from_file` у объекта `library`, чтобы загрузить данные из указанного файла
            print(f"Данные успешно загружены из файла'{filename}'.")

        elif choice == "7":
            filename = input("Введите имя файла для сохранения данных: ")
            library.save_to_file(filename) #Вызывает метод `save_to_file` у объекта `library`, чтобы сохранить данные в указанный файл
            print(f"Данные успешно сохранены в файл '{filename}'.")

        elif choice == "8":
            issued_books = library.issued_books_report() #Получает отчет о выданных книгах с помощью метода `issued_books_report` и сохраняет его в переменной `issued_books`
            if issued_books: #Проверяет, есть ли выданные книги в отчете. Если да, выполняет следующий блок кода
                print("\nОтчёт о выданных книгах:") #Выводит заголовок отчета о выданных книгах на экран
                for entry in issued_books: #Начинает цикл по каждому элементу в списке выданных книг (`issued_books`)
                    print(f"Читатель: {entry['reader']} \nКнига: {entry['book_title']}\n" 
                          f"Дата выдачи: {entry['borrow_date']}")
                    #Для каждого элемента выводит информацию о читателе, названии книги и дате выдачи. Используется форматирование строк для удобного вывода информации
            else:
                print("\nНет выданных книг на данный момент.")
            #Если список выданных книг пустой, выводит сообщение о том, что нет выданных книг на данный момент

        elif choice == "9":
            print("Выход из системы. До свидания!")
        #Проверяет, выбрал ли пользователь действие "9" (Выйти)
            break #Завершает бесконечный цикл, что приводит к выходу из программы

        else:
            print("Неверный ввод. Пожалуйста, выберите правильное действие.")
        #Если пользователь ввел неверный номер действия (не от 1 до 9), выводит сообщение об ошибке и предлагает выбрать правильное действие

